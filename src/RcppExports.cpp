// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_mlx_value_grad
SEXP cpp_mlx_value_grad(SEXP fun_sexp, List args, IntegerVector argnums, bool return_value);
RcppExport SEXP _Rmlx_cpp_mlx_value_grad(SEXP fun_sexpSEXP, SEXP argsSEXP, SEXP argnumsSEXP, SEXP return_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fun_sexp(fun_sexpSEXP);
    Rcpp::traits::input_parameter< List >::type args(argsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type argnums(argnumsSEXP);
    Rcpp::traits::input_parameter< bool >::type return_value(return_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_value_grad(fun_sexp, args, argnums, return_value));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_stop_gradient
SEXP cpp_mlx_stop_gradient(SEXP xp_);
RcppExport SEXP _Rmlx_cpp_mlx_stop_gradient(SEXP xp_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_stop_gradient(xp_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_from_r
SEXP cpp_mlx_from_r(SEXP x_, SEXP dim_, SEXP dtype_, SEXP device_);
RcppExport SEXP _Rmlx_cpp_mlx_from_r(SEXP x_SEXP, SEXP dim_SEXP, SEXP dtype_SEXP, SEXP device_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type dim_(dim_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type dtype_(dtype_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type device_(device_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_from_r(x_, dim_, dtype_, device_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_empty
SEXP cpp_mlx_empty(SEXP dim_, SEXP dtype_, SEXP device_);
RcppExport SEXP _Rmlx_cpp_mlx_empty(SEXP dim_SEXP, SEXP dtype_SEXP, SEXP device_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type dim_(dim_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type dtype_(dtype_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type device_(device_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_empty(dim_, dtype_, device_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_to_r
SEXP cpp_mlx_to_r(SEXP xp_);
RcppExport SEXP _Rmlx_cpp_mlx_to_r(SEXP xp_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_to_r(xp_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_eval
void cpp_mlx_eval(SEXP xp_);
RcppExport SEXP _Rmlx_cpp_mlx_eval(SEXP xp_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    cpp_mlx_eval(xp_);
    return R_NilValue;
END_RCPP
}
// cpp_mlx_shape
IntegerVector cpp_mlx_shape(SEXP xp_);
RcppExport SEXP _Rmlx_cpp_mlx_shape(SEXP xp_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_shape(xp_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_dtype
std::string cpp_mlx_dtype(SEXP xp_);
RcppExport SEXP _Rmlx_cpp_mlx_dtype(SEXP xp_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_dtype(xp_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_unary
SEXP cpp_mlx_unary(SEXP xp_, std::string op);
RcppExport SEXP _Rmlx_cpp_mlx_unary(SEXP xp_SEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_unary(xp_, op));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_binary
SEXP cpp_mlx_binary(SEXP xp1_, SEXP xp2_, std::string op, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_binary(SEXP xp1_SEXP, SEXP xp2_SEXP, SEXP opSEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp1_(xp1_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp2_(xp2_SEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_binary(xp1_, xp2_, op, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_reduce
SEXP cpp_mlx_reduce(SEXP xp_, std::string op);
RcppExport SEXP _Rmlx_cpp_mlx_reduce(SEXP xp_SEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_reduce(xp_, op));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_reduce_axis
SEXP cpp_mlx_reduce_axis(SEXP xp_, std::string op, int axis, bool keepdims);
RcppExport SEXP _Rmlx_cpp_mlx_reduce_axis(SEXP xp_SEXP, SEXP opSEXP, SEXP axisSEXP, SEXP keepdimsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    Rcpp::traits::input_parameter< int >::type axis(axisSEXP);
    Rcpp::traits::input_parameter< bool >::type keepdims(keepdimsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_reduce_axis(xp_, op, axis, keepdims));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_transpose
SEXP cpp_mlx_transpose(SEXP xp_);
RcppExport SEXP _Rmlx_cpp_mlx_transpose(SEXP xp_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_transpose(xp_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_reshape
SEXP cpp_mlx_reshape(SEXP xp_, SEXP new_dim_);
RcppExport SEXP _Rmlx_cpp_mlx_reshape(SEXP xp_SEXP, SEXP new_dim_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type new_dim_(new_dim_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_reshape(xp_, new_dim_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_matmul
SEXP cpp_mlx_matmul(SEXP xp1_, SEXP xp2_, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_matmul(SEXP xp1_SEXP, SEXP xp2_SEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp1_(xp1_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp2_(xp2_SEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_matmul(xp1_, xp2_, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_random_normal
SEXP cpp_mlx_random_normal(SEXP dim_, double mean, double std, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_random_normal(SEXP dim_SEXP, SEXP meanSEXP, SEXP stdSEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type dim_(dim_SEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type std(stdSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_random_normal(dim_, mean, std, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_random_bernoulli
SEXP cpp_mlx_random_bernoulli(SEXP dim_, double prob, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_random_bernoulli(SEXP dim_SEXP, SEXP probSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type dim_(dim_SEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_random_bernoulli(dim_, prob, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_random_uniform
SEXP cpp_mlx_random_uniform(SEXP dim_, double low, double high, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_random_uniform(SEXP dim_SEXP, SEXP lowSEXP, SEXP highSEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type dim_(dim_SEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type high(highSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_random_uniform(dim_, low, high, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_synchronize
void cpp_mlx_synchronize(std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_synchronize(SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    cpp_mlx_synchronize(device_str);
    return R_NilValue;
END_RCPP
}
// cpp_mlx_slice
SEXP cpp_mlx_slice(SEXP xp_, SEXP starts_, SEXP stops_, SEXP strides_);
RcppExport SEXP _Rmlx_cpp_mlx_slice(SEXP xp_SEXP, SEXP starts_SEXP, SEXP stops_SEXP, SEXP strides_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type starts_(starts_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type stops_(stops_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type strides_(strides_SEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_slice(xp_, starts_, stops_, strides_));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_cumulative
SEXP cpp_mlx_cumulative(SEXP xp_, std::string op);
RcppExport SEXP _Rmlx_cpp_mlx_cumulative(SEXP xp_SEXP, SEXP opSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_cumulative(xp_, op));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_solve
SEXP cpp_mlx_solve(SEXP a_xp_, SEXP b_xp_, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_solve(SEXP a_xp_SEXP, SEXP b_xp_SEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a_xp_(a_xp_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type b_xp_(b_xp_SEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_solve(a_xp_, b_xp_, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_fft
SEXP cpp_mlx_fft(SEXP xp_, bool inverse, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_fft(SEXP xp_SEXP, SEXP inverseSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_(xp_SEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_fft(xp_, inverse, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_cholesky
SEXP cpp_mlx_cholesky(SEXP a_xp_, bool upper, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_cholesky(SEXP a_xp_SEXP, SEXP upperSEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a_xp_(a_xp_SEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_cholesky(a_xp_, upper, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_qr
SEXP cpp_mlx_qr(SEXP a_xp_, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_qr(SEXP a_xp_SEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a_xp_(a_xp_SEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_qr(a_xp_, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_svd
SEXP cpp_mlx_svd(SEXP a_xp_, bool compute_uv, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_svd(SEXP a_xp_SEXP, SEXP compute_uvSEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a_xp_(a_xp_SEXP);
    Rcpp::traits::input_parameter< bool >::type compute_uv(compute_uvSEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_svd(a_xp_, compute_uv, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}
// cpp_mlx_pinv
SEXP cpp_mlx_pinv(SEXP a_xp_, std::string dtype_str, std::string device_str);
RcppExport SEXP _Rmlx_cpp_mlx_pinv(SEXP a_xp_SEXP, SEXP dtype_strSEXP, SEXP device_strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a_xp_(a_xp_SEXP);
    Rcpp::traits::input_parameter< std::string >::type dtype_str(dtype_strSEXP);
    Rcpp::traits::input_parameter< std::string >::type device_str(device_strSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_mlx_pinv(a_xp_, dtype_str, device_str));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rmlx_cpp_mlx_value_grad", (DL_FUNC) &_Rmlx_cpp_mlx_value_grad, 4},
    {"_Rmlx_cpp_mlx_stop_gradient", (DL_FUNC) &_Rmlx_cpp_mlx_stop_gradient, 1},
    {"_Rmlx_cpp_mlx_from_r", (DL_FUNC) &_Rmlx_cpp_mlx_from_r, 4},
    {"_Rmlx_cpp_mlx_empty", (DL_FUNC) &_Rmlx_cpp_mlx_empty, 3},
    {"_Rmlx_cpp_mlx_to_r", (DL_FUNC) &_Rmlx_cpp_mlx_to_r, 1},
    {"_Rmlx_cpp_mlx_eval", (DL_FUNC) &_Rmlx_cpp_mlx_eval, 1},
    {"_Rmlx_cpp_mlx_shape", (DL_FUNC) &_Rmlx_cpp_mlx_shape, 1},
    {"_Rmlx_cpp_mlx_dtype", (DL_FUNC) &_Rmlx_cpp_mlx_dtype, 1},
    {"_Rmlx_cpp_mlx_unary", (DL_FUNC) &_Rmlx_cpp_mlx_unary, 2},
    {"_Rmlx_cpp_mlx_binary", (DL_FUNC) &_Rmlx_cpp_mlx_binary, 5},
    {"_Rmlx_cpp_mlx_reduce", (DL_FUNC) &_Rmlx_cpp_mlx_reduce, 2},
    {"_Rmlx_cpp_mlx_reduce_axis", (DL_FUNC) &_Rmlx_cpp_mlx_reduce_axis, 4},
    {"_Rmlx_cpp_mlx_transpose", (DL_FUNC) &_Rmlx_cpp_mlx_transpose, 1},
    {"_Rmlx_cpp_mlx_reshape", (DL_FUNC) &_Rmlx_cpp_mlx_reshape, 2},
    {"_Rmlx_cpp_mlx_matmul", (DL_FUNC) &_Rmlx_cpp_mlx_matmul, 4},
    {"_Rmlx_cpp_mlx_random_normal", (DL_FUNC) &_Rmlx_cpp_mlx_random_normal, 5},
    {"_Rmlx_cpp_mlx_random_bernoulli", (DL_FUNC) &_Rmlx_cpp_mlx_random_bernoulli, 3},
    {"_Rmlx_cpp_mlx_random_uniform", (DL_FUNC) &_Rmlx_cpp_mlx_random_uniform, 5},
    {"_Rmlx_cpp_mlx_synchronize", (DL_FUNC) &_Rmlx_cpp_mlx_synchronize, 1},
    {"_Rmlx_cpp_mlx_slice", (DL_FUNC) &_Rmlx_cpp_mlx_slice, 4},
    {"_Rmlx_cpp_mlx_cumulative", (DL_FUNC) &_Rmlx_cpp_mlx_cumulative, 2},
    {"_Rmlx_cpp_mlx_solve", (DL_FUNC) &_Rmlx_cpp_mlx_solve, 4},
    {"_Rmlx_cpp_mlx_fft", (DL_FUNC) &_Rmlx_cpp_mlx_fft, 3},
    {"_Rmlx_cpp_mlx_cholesky", (DL_FUNC) &_Rmlx_cpp_mlx_cholesky, 4},
    {"_Rmlx_cpp_mlx_qr", (DL_FUNC) &_Rmlx_cpp_mlx_qr, 3},
    {"_Rmlx_cpp_mlx_svd", (DL_FUNC) &_Rmlx_cpp_mlx_svd, 4},
    {"_Rmlx_cpp_mlx_pinv", (DL_FUNC) &_Rmlx_cpp_mlx_pinv, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rmlx(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
