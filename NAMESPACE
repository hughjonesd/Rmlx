# Generated by roxygen2: do not edit by hand

S3method("%*%",mlx)
S3method("[",mlx)
S3method("[<-",mlx)
S3method("dim<-",mlx)
S3method(Conj,mlx)
S3method(Im,mlx)
S3method(Math,mlx)
S3method(Ops,mlx)
S3method(Re,mlx)
S3method(Summary,mlx)
S3method(all.equal,mlx)
S3method(aperm,mlx)
S3method(as.array,mlx)
S3method(as.matrix,mlx)
S3method(as.vector,mlx)
S3method(cbind,mlx)
S3method(chol,mlx)
S3method(chol2inv,default)
S3method(chol2inv,mlx)
S3method(crossprod,mlx)
S3method(diag,default)
S3method(diag,mlx)
S3method(dim,mlx)
S3method(fft,default)
S3method(fft,mlx)
S3method(is.finite,mlx)
S3method(is.infinite,mlx)
S3method(is.nan,mlx)
S3method(kronecker,mlx)
S3method(length,mlx)
S3method(mean,mlx)
S3method(outer,default)
S3method(outer,mlx)
S3method(print,mlx)
S3method(qr,mlx)
S3method(rbind,mlx)
S3method(solve,mlx)
S3method(str,mlx)
S3method(svd,default)
S3method(svd,mlx)
S3method(t,mlx)
S3method(tcrossprod,mlx)
export(abind)
export(as_mlx)
export(chol2inv)
export(colMeans)
export(colSums)
export(diag)
export(fft)
export(is.mlx)
export(kronecker)
export(kronecker.default)
export(mlx_addmm)
export(mlx_all)
export(mlx_allclose)
export(mlx_any)
export(mlx_arange)
export(mlx_argmax)
export(mlx_argmin)
export(mlx_argpartition)
export(mlx_argsort)
export(mlx_batch_norm)
export(mlx_binary_cross_entropy)
export(mlx_broadcast_arrays)
export(mlx_broadcast_to)
export(mlx_cholesky_inv)
export(mlx_clip)
export(mlx_compile)
export(mlx_conjugate)
export(mlx_conv1d)
export(mlx_conv2d)
export(mlx_conv3d)
export(mlx_conv_transpose1d)
export(mlx_conv_transpose2d)
export(mlx_conv_transpose3d)
export(mlx_cross)
export(mlx_cross_entropy)
export(mlx_cumprod)
export(mlx_cumsum)
export(mlx_default_device)
export(mlx_degrees)
export(mlx_dequantize)
export(mlx_diagonal)
export(mlx_dim)
export(mlx_disable_compile)
export(mlx_dropout)
export(mlx_dtype)
export(mlx_eig)
export(mlx_eigh)
export(mlx_eigvals)
export(mlx_eigvalsh)
export(mlx_embedding)
export(mlx_enable_compile)
export(mlx_eval)
export(mlx_expand_dims)
export(mlx_eye)
export(mlx_flatten)
export(mlx_forward)
export(mlx_full)
export(mlx_gather)
export(mlx_gather_qmm)
export(mlx_gelu)
export(mlx_grad)
export(mlx_identity)
export(mlx_imag)
export(mlx_inv)
export(mlx_isclose)
export(mlx_isfinite)
export(mlx_isinf)
export(mlx_isnan)
export(mlx_isneginf)
export(mlx_isposinf)
export(mlx_key)
export(mlx_key_bits)
export(mlx_key_split)
export(mlx_kron)
export(mlx_l1_loss)
export(mlx_layer_norm)
export(mlx_leaky_relu)
export(mlx_linear)
export(mlx_linspace)
export(mlx_load)
export(mlx_load_gguf)
export(mlx_load_safetensors)
export(mlx_logcumsumexp)
export(mlx_logsumexp)
export(mlx_lu)
export(mlx_maximum)
export(mlx_mean)
export(mlx_meshgrid)
export(mlx_minimum)
export(mlx_moveaxis)
export(mlx_mse_loss)
export(mlx_nan_to_num)
export(mlx_norm)
export(mlx_ones)
export(mlx_ones_like)
export(mlx_optimizer_sgd)
export(mlx_pad)
export(mlx_param_set_values)
export(mlx_param_values)
export(mlx_parameters)
export(mlx_partition)
export(mlx_prod)
export(mlx_quantize)
export(mlx_quantized_matmul)
export(mlx_radians)
export(mlx_rand_bernoulli)
export(mlx_rand_categorical)
export(mlx_rand_gumbel)
export(mlx_rand_laplace)
export(mlx_rand_multivariate_normal)
export(mlx_rand_normal)
export(mlx_rand_permutation)
export(mlx_rand_randint)
export(mlx_rand_truncated_normal)
export(mlx_rand_uniform)
export(mlx_real)
export(mlx_relu)
export(mlx_repeat)
export(mlx_reshape)
export(mlx_roll)
export(mlx_save)
export(mlx_save_gguf)
export(mlx_save_safetensors)
export(mlx_sequential)
export(mlx_sigmoid)
export(mlx_silu)
export(mlx_slice_update)
export(mlx_softmax)
export(mlx_softmax_layer)
export(mlx_solve_triangular)
export(mlx_sort)
export(mlx_split)
export(mlx_squeeze)
export(mlx_stack)
export(mlx_std)
export(mlx_stop_gradient)
export(mlx_sum)
export(mlx_swapaxes)
export(mlx_synchronize)
export(mlx_tanh)
export(mlx_tile)
export(mlx_topk)
export(mlx_trace)
export(mlx_train_step)
export(mlx_tri)
export(mlx_tri_inv)
export(mlx_tril)
export(mlx_triu)
export(mlx_unflatten)
export(mlx_value_grad)
export(mlx_var)
export(mlx_where)
export(mlx_zeros)
export(mlx_zeros_like)
export(outer)
export(pinv)
export(rowMeans)
export(rowSums)
export(svd)
export(with_default_device)
exportMethods(kronecker)
import(methods)
importFrom(Rcpp,sourceCpp)
importFrom(stats,rnorm)
importFrom(utils,tail)
importMethodsFrom(methods,kronecker)
useDynLib(Rmlx, .registration = TRUE)
