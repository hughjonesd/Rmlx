% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create.R
\name{mlx_tri}
\alias{mlx_tri}
\alias{mlx_tril}
\alias{mlx_triu}
\title{Triangular helpers for MLX arrays}
\usage{
mlx_tri(
  n,
  m = NULL,
  k = 0L,
  dtype = c("float32", "float64"),
  device = mlx_default_device()
)

mlx_tril(x, k = 0L)

mlx_triu(x, k = 0L)
}
\arguments{
\item{n}{Number of rows.}

\item{m}{Optional number of columns (defaults to \code{n} for square output).}

\item{k}{Diagonal offset: \code{0} selects the main diagonal, positive values move
to the upper diagonals, negative values to the lower diagonals.}

\item{dtype}{MLX dtype to use (\code{"float32"} or \code{"float64"}).}

\item{device}{Execution target: provide \code{"gpu"}, \code{"cpu"}, or an
\code{mlx_stream} created via \code{\link[=mlx_new_stream]{mlx_new_stream()}}. Defaults to the current
\code{\link[=mlx_default_device]{mlx_default_device()}}.}

\item{x}{Object coercible to \code{mlx}.}
}
\value{
An \code{mlx} array.
}
\description{
\code{mlx_tri()} creates a lower-triangular mask (ones on and below a diagonal,
zeros elsewhere). \code{mlx_tril()} and \code{mlx_triu()} retain only the lower or
upper triangular part of an existing array, respectively.
}
\examples{
mlx_tri(3)          # 3x3 lower-triangular mask
mlx_tril(diag(3) + 2)  # keep lower part of a matrix
}
\seealso{
\href{https://ml-explore.github.io/mlx/build/html/python/array.html#mlx.core.tri}{mlx.core.tri}
}
