% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nn.R
\name{mlx_conv_transpose2d}
\alias{mlx_conv_transpose2d}
\title{2D Transposed Convolution}
\usage{
mlx_conv_transpose2d(
  input,
  weight,
  stride = c(1L, 1L),
  padding = c(0L, 0L),
  dilation = c(1L, 1L),
  output_padding = c(0L, 0L),
  groups = 1L,
  device = mlx_default_device()
)
}
\arguments{
\item{input}{An mlx array with shape \verb{(batch, height, width, in_channels)} for 'NHWC' layout}

\item{weight}{An mlx array with shape \verb{(out_channels, kernel_h, kernel_w, in_channels)}}

\item{stride}{Stride of the convolution. Can be a scalar or length-2 vector. Default: c(1, 1)}

\item{padding}{Amount of zero padding. Can be a scalar or length-2 vector. Default: c(0, 0)}

\item{dilation}{Dilation factor for the kernel. Can be a scalar or length-2 vector. Default: c(1, 1)}

\item{output_padding}{Additional size added to output shape. Can be a scalar or length-2 vector. Default: c(0, 0)}

\item{groups}{Number of blocked connections from input to output channels. Default: 1}

\item{device}{Device to perform computation on. Default: \code{mlx_default_device()}}
}
\value{
An mlx array with the transposed convolution result
}
\description{
Applies a 2D transposed convolution (also called deconvolution) over an input signal.
Transposed convolutions are commonly used in image generation and upsampling tasks.
}
\seealso{
\code{\link[=mlx_conv2d]{mlx_conv2d()}}, \code{\link[=mlx_conv_transpose1d]{mlx_conv_transpose1d()}}, \code{\link[=mlx_conv_transpose3d]{mlx_conv_transpose3d()}}

\url{https://ml-explore.github.io/mlx/build/html/python/nn.html}
}
