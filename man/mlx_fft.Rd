% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fft.R
\name{mlx_fft}
\alias{mlx_fft}
\alias{mlx_fft2}
\alias{mlx_fftn}
\title{Fast Fourier transforms for MLX arrays}
\usage{
mlx_fft(x, axis = -1L, inverse = FALSE, device = NULL)

mlx_fft2(x, axes = c(-2L, -1L), inverse = FALSE, device = NULL)

mlx_fftn(x, axes = NULL, inverse = FALSE, device = NULL)
}
\arguments{
\item{x}{Array-like object coercible to \code{mlx}.}

\item{axis}{Optional integer axis (1-indexed, negatives count from the end)
for the one-dimensional transform.}

\item{inverse}{Logical flag; if \code{TRUE}, compute the inverse transform. The
inverse is un-normalised to match base R's \code{fft()}, i.e. results are
multiplied by the product of the transformed axis lengths.}

\item{device}{Target device or stream. Defaults to the input array's device
(or \code{\link[=mlx_default_device]{mlx_default_device()}} for non-mlx inputs).}

\item{axes}{Optional integer vector of axes for the multi-dimensional
transforms. When \code{NULL}, MLX uses all axes.}
}
\value{
An \code{mlx} array containing complex frequency coefficients.
}
\description{
\code{mlx_fft()}, \code{mlx_fft2()}, and \code{mlx_fftn()} wrap the MLX FFT kernels with
R-friendly defaults. Inputs are converted with \code{\link[=as_mlx]{as_mlx()}} and results are
returned as \code{mlx} arrays.
}
\examples{
x <- as_mlx(c(1, 2, 3, 4))
mlx_fft(x)
mlx_fft(x, inverse = TRUE)
mat <- matrix(1:9, 3, 3)
mlx_fft2(as_mlx(mat))
arr <- as_mlx(array(1:8, dim = c(2, 2, 2)))
mlx_fftn(arr)
}
\seealso{
\code{\link[=fft]{fft()}}, \href{https://ml-explore.github.io/mlx/build/html/python/fft.html}{mlx.fft}
}
